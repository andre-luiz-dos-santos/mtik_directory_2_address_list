# coding: utf-8
require 'optparse'
require 'syslog'
require 'mtik_directory_2_address_list'

class Args
  Error = Class.new(StandardError)

  attr_reader :verbose, :prefix, :retry_timeout

  def initialize
    @verbose = STDOUT.tty?
    @prefix = 'md2al_'
    @retry_timeout = 15 # seconds
  end

  def self.parse
    self.new.tap { |args| args.parse }
  end

  def parse
    opts = OptionParser.new
    opts.banner = 'Usage: <host> <username> <password> <dir> [options]'

    opts.separator ''
    opts.separator 'Options:'
    opts.on('-p', '--prefix PREFIX', 'Mikrotik address-list prefix',
            "(default: #{@prefix})") { |s| @prefix = s }
    opts.on('-v', '--[no-]verbose', 'Print debug messages to stdout',
            '(default: true if stdout is a TTY)') { |v| @verbose = v }
    opts.on('--retry-timeout SECONDS', Integer, 'Wait before restarting after an error',
            "(default: #{@retry_timeout})") { |i| @retry_timeout = i }

    opts.separator ''
    opts.separator 'Symbolic links in <dir>, named like an IP address, will be sent to the'
    opts.separator 'Mikrotik device at <host>. The address-list name will be formed by the'
    opts.separator 'PREFIX + whatever the link points to.'
    opts.separator ''
    opts.separator 'For example, the following symbolic link: 1.2.3.4 -> 15mbps'
    opts.separator 'With --prefix set to "down_speed_", will add the IP 1.2.3.4,'
    opts.separator 'to the address-list named down_speed_15mbps.'
    opts.separator ''

    opts.parse!
    ARGV.size == 4 || raise(Error, "need 4 arguments, but #{ARGV.size} provided")

  rescue Error, OptionParser::ParseError => err
    STDERR << opts << 'Error: ' << err << "\n"
    exit(2)
  end

  def directory
    ARGV[3]
  end

  def mikrotik
    Hash[[:host, :user, :pass].zip(ARGV[0, 3])]
  end
end

class Main
  def initialize
    args
    sync
  end

  def args
    @args ||= Args.parse.tap do |args|
      Syslog.open($PROGRAM_NAME, Syslog::LOG_PID, Syslog::LOG_DAEMON)
      args.verbose && MtikDirectory2AddressList::Log.output(&method(:info))
    end
  end

  def sync
    MtikDirectory2AddressList.sync(args.directory, args.mikrotik, args.prefix)
  rescue => err
    err("Error: #{err}")
    err.backtrace.each { |line| err(" #{line}") }
    sleep(args.retry_timeout)
    retry
  end

  # Send +message+ to syslog and STDERR.
  # @param [String] message
  # @return [void]
  def err(message)
    Syslog.err('%s', message)
    STDERR << message << "\n" if STDERR.tty?
  end

  # Send +message+ to STDOUT.
  # @param [String] message
  # @return [void]
  def info(message)
    STDOUT << message << "\n"
  end
end

Main.new
